== Introduction ==

The purpose of this document is to explicate the detailed technical architecture of the Esprit, which is a Social Networking Site (!SNS) !vis-!à-!vis Java Shindig !OpenSocial Reference implementation.


== Details ==

==Architecture Diagram==






[http://esprit.googlecode.com/svn/trunk/html/images/Esprit_Shindig_Rest_Server_Integration.gif]

Fig 1.1 Spice and Shindig Rest Server integration

== esprit with Shindig ==

To use Shindig as an opensocial container, Esprit need to pass security token as a request parameter. For now, we have used the token generation model of Shindig, which can be modified further depending upon any SNS requirement.
Following files have been use from Shindig to form the security token:
 # Crypto.php
 # !BlobCrypter.php
 # !SecurityToken.php
 # !BasicBlobCrypter.php
 # !BasicSecurityToken.php

Shindig container in SPICE can be implemented by using the shindig server components, * OpenSocial Restful component*

== OpenSocial Restful Component ==

 Esprit !OpenSocial Restful component includes the following classes:

 # !SpicePeopleService- !SpicePeopleService class implements all the methods to handle each kind of request (requesting, updating…) related to person/user’s personal information. SpicePeopleService implement the Shindig’s !PeopleService class which specifies all the possible methods and their prototypes which a container must follow.
 # !SpiceActivitiesService- !SpiceActivitiesService class implements all the methods to handle each kind of request (requesting, updating…) related to person/user’s activities. SpiceActivitiesService implements the Shindig’s !ActivitiesService class which specifies the all the possible methods and their prototypes which a container must follow.
 # !SpiceDataService- !SpiceData class implements all the methods to handle each kind of request (requesting, updating…) related to person/user’s application related data. SpiceDataService implements the Shindig’s !DataService class which specifies the all the possible methods and their prototypes which a container must follow.
 # SpiceDBFetcher- SpiceDBFetcher is simply a Data Access Layer talking to SPICE database. All the services (!SpicePeopleService, !SpiceDataService and !SpiceActivitiesService) use this data access layer for creating, fetching, updating and deleting information into SPICE database which are coming from !OpenSocial gadgets.